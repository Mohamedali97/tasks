#exrcis 1
def get_leaves(G):
G = nx.Graph()
G.add_edges_from([
        ('a', 'b'),
        ('a', 'd'),
        ('c', 'd'),
    ])
assert set(get_leaves(G)) == {'c', 'b'}
items = ['spider', 'y', 'banana']
[item.upper() for item in items]
print(G.nodes())
print([G.degree(n) for n in G.nodes()])
g = (len(item) for item in items)
list(g)
max(len(item) for item in items)
sorted(item.upper() for item in items)
G = nx.Graph()

G.add_nodes_from(['cat','dog','virus',13])

G.add_edge('cat','dog')

nx.draw(G, with_labels=True, font_color='white', node_size=1000)
nx.draw(SG, node_size=2000, node_color='lightblue', with_labels=True)
# EXERCIS 2
SG.degree('Alice')
def max_degree(G):
    
SG = nx.read_adjlist('../datasets/friends.adjlist')
assert max_degree(SG) == ('Claire', 4)
#EXERCIS 3
def mutual_friends(G, node_1, node_2):
SG = nx.read_adjlist('../datasets/friends.adjlist')
assert mutual_friends(SG, 'Alice', 'Claire') == ['Frank']
assert mutual_friends(SG, 'George', 'Bob') == []
assert sorted(mutual_friends(SG, 'Claire', 'George')) == ['Dennis', 'Frank']
D = nx.DiGraph()

D.add_edges_from([(1,2),(2,3),(3,2),(3,4),(3,5),(4,5),(4,6),(5,6),(6,4),(4,2)])

nx.draw(D, with_labels=True)
D.has_edge(1,2)
D.has_edge(2,1)
print('Successors of 2:', list(D.successors(2)))

print('Predecessors of 2:', list(D.predecessors(2)))
D.in_degree(2)
D.out_degree(2)
D.degree(2)
print('Successors of 2:', list(D.successors(2)))
print('"Neighbors" of 2:', list(D.neighbors(2)))
